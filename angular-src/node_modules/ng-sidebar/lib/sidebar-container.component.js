"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var core_1 = require("@angular/core");
var sidebar_component_1 = require("./sidebar.component");
// Based on https://github.com/angular/material2/tree/master/src/lib/sidenav
var SidebarContainer = (function () {
    function SidebarContainer(_ref) {
        this._ref = _ref;
        this.allowSidebarBackdropControl = true;
        this.showBackdrop = false;
        this.showBackdropChange = new core_1.EventEmitter();
    }
    SidebarContainer.prototype.ngAfterContentInit = function () {
        var _this = this;
        this._subscribe();
        this._sidebars.changes.subscribe(function () {
            _this._unsubscribe();
            _this._subscribe();
        });
    };
    SidebarContainer.prototype.ngOnChanges = function (changes) {
        if (changes['showBackdrop']) {
            this.showBackdropChange.emit(changes['showBackdrop'].currentValue);
        }
    };
    SidebarContainer.prototype.ngOnDestroy = function () {
        this._unsubscribe();
    };
    /**
     * @internal
     *
     * Computes `margin` value to push page contents to accommodate open sidebars as needed.
     *
     * @return {CSSStyleDeclaration} margin styles for the page content.
     */
    SidebarContainer.prototype._getStyles = function () {
        var left = 0, right = 0, top = 0, bottom = 0;
        if (this._sidebars) {
            this._sidebars.forEach(function (sidebar) {
                if (sidebar && (sidebar.mode === 'push' && sidebar.opened) || sidebar.mode === 'dock') {
                    switch (sidebar.position) {
                        case 'left':
                            left = Math.max(left, sidebar._width);
                            break;
                        case 'right':
                            right = Math.max(right, sidebar._width);
                            break;
                        case 'top':
                            top = Math.max(top, sidebar._height);
                            break;
                        case 'bottom':
                            bottom = Math.max(bottom, sidebar._height);
                            break;
                    }
                }
            });
        }
        return {
            margin: top + "px " + right + "px " + bottom + "px " + left + "px"
        };
    };
    /**
     * Subscribes from all sidebar events to react properly.
     */
    SidebarContainer.prototype._subscribe = function () {
        var _this = this;
        if (this._sidebars) {
            this._sidebars.forEach(function (sidebar) {
                sidebar.onOpenStart.subscribe(function () { return _this._onToggle(); });
                sidebar.onOpened.subscribe(function () { return _this._markForCheck(); });
                sidebar.onCloseStart.subscribe(function () { return _this._onToggle(); });
                sidebar.onClosed.subscribe(function () { return _this._markForCheck(); });
                sidebar.onModeChange.subscribe(function () { return _this._markForCheck(); });
                sidebar.onPositionChange.subscribe(function () { return _this._markForCheck(); });
            });
        }
    };
    /**
     * Unsubscribes from all sidebars.
     */
    SidebarContainer.prototype._unsubscribe = function () {
        if (this._sidebars) {
            this._sidebars.forEach(function (sidebar) {
                sidebar.onOpenStart.unsubscribe();
                sidebar.onOpened.unsubscribe();
                sidebar.onCloseStart.unsubscribe();
                sidebar.onClosed.unsubscribe();
                sidebar.onModeChange.unsubscribe();
                sidebar.onPositionChange.unsubscribe();
            });
        }
    };
    /**
     * Triggers change detection to recompute styles.
     */
    SidebarContainer.prototype._markForCheck = function () {
        this._ref.markForCheck();
    };
    /**
     * Check if we should show the backdrop when a sidebar is toggled.
     */
    SidebarContainer.prototype._onToggle = function () {
        if (this._sidebars && this.allowSidebarBackdropControl) {
            var hasOpen = false;
            var _sidebars = this._sidebars.toArray();
            for (var i = 0; i < _sidebars.length; i++) {
                var sidebar = _sidebars[i];
                // Show backdrop if a single open sidebar has it set
                if (sidebar.opened && sidebar.showBackdrop) {
                    hasOpen = true;
                    break;
                }
            }
            this.showBackdrop = hasOpen;
            this.showBackdropChange.emit(hasOpen);
        }
        this._markForCheck();
    };
    return SidebarContainer;
}());
__decorate([
    core_1.Input(),
    __metadata("design:type", String)
], SidebarContainer.prototype, "backdropClass", void 0);
__decorate([
    core_1.Input(),
    __metadata("design:type", Boolean)
], SidebarContainer.prototype, "allowSidebarBackdropControl", void 0);
__decorate([
    core_1.Input(),
    __metadata("design:type", Boolean)
], SidebarContainer.prototype, "showBackdrop", void 0);
__decorate([
    core_1.Output(),
    __metadata("design:type", Object)
], SidebarContainer.prototype, "showBackdropChange", void 0);
__decorate([
    core_1.ContentChildren(sidebar_component_1.Sidebar),
    __metadata("design:type", core_1.QueryList)
], SidebarContainer.prototype, "_sidebars", void 0);
SidebarContainer = __decorate([
    core_1.Component({
        selector: 'ng-sidebar-container',
        template: "\n    <ng-content select=\"ng-sidebar\"></ng-content>\n\n    <div *ngIf=\"showBackdrop\"\n      aria-hidden=\"true\"\n      class=\"ng-sidebar__backdrop\"\n      [ngClass]=\"backdropClass\"></div>\n\n    <div class=\"ng-sidebar__content\" [ngStyle]=\"_getStyles()\">\n      <ng-content></ng-content>\n    </div>\n  ",
        styles: ["\n    ng-sidebar-container {\n      box-sizing: border-box;\n      display: block;\n      position: relative;\n    }\n\n    .ng-sidebar__backdrop {\n      background: #000;\n      height: 100%;\n      left: 0;\n      opacity: 0.75;\n      pointer-events: auto;\n      position: fixed;\n      top: 0;\n      width: 100%;\n      z-index: 99999998;\n    }\n\n    .ng-sidebar__content {\n      display: block;\n      height: 100%;\n      overflow: auto;\n    }\n  "],
        changeDetection: core_1.ChangeDetectionStrategy.OnPush,
        encapsulation: core_1.ViewEncapsulation.None
    }),
    __metadata("design:paramtypes", [core_1.ChangeDetectorRef])
], SidebarContainer);
exports.SidebarContainer = SidebarContainer;
